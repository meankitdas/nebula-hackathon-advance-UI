import Head from "next/head";

import MainPage from "../components/mainPage/mainPage";
import SpeakerPage from "../components/speakerPage/speakerPage";
import TimelinePage from "../components/timelinePage/timelinePage";
// import { isMobile } from "react-device-detect";

import { useRef } from "react";
import {
  motion,
  useScroll,
  useSpring,
  useTransform,
  useMotionValue,
  useVelocity,
  useAnimationFrame
} from "framer-motion";



export default function Home() {

  function ParallaxText(_a) {
    var children = _a.children, _b = _a.baseVelocity, baseVelocity = _b === void 0 ? 100 : _b;
    var baseX = useMotionValue(0);
    var scrollY = useScroll().scrollY;
    var scrollVelocity = useVelocity(scrollY);
    var smoothVelocity = useSpring(scrollVelocity, {
        damping: 50,
        stiffness: 400
    });
    var velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {
        clamp: false
    });
    /**
     * This is a magic wrapping for the length of the text - you
     * have to replace for wrapping that works for you or dynamically
     * calculate
     */
    var x = useTransform(baseX, function (v) { return "".concat(wrap(-20, -45, v), "%"); });
    var directionFactor = useRef(1);
    useAnimationFrame(function (t, delta) {
        var moveBy = directionFactor.current * baseVelocity * (delta / 1000);
        /**
         * This is what changes the direction of the scroll once we
         * switch scrolling directions.
         */
        if (velocityFactor.get() < 0) {
            directionFactor.current = -1;
        }
        else if (velocityFactor.get() > 0) {
            directionFactor.current = 1;
        }
        moveBy += directionFactor.current * moveBy * velocityFactor.get();
        baseX.set(baseX.get() + moveBy);
    });
    /**
     * The number of times to repeat the child text should be dynamically calculated
     * based on the size of the text and viewport. Likewise, the x motion value is
     * currently wrapped between -20 and -45% - this 25% is derived from the fact
     * we have four children (100% / 4). This would also want deriving from the
     * dynamically generated number of children.
     */
    return (
      <div className="parallax">
        <motion.div className="scroller" style={{ x }}>
          <span>{children} </span>
          <span>{children} </span>
          <span>{children} </span>
          <span>{children} </span>
        </motion.div>
      </div>)
}



  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-primary text-black font-dosis">
        <MainPage />
        <SpeakerPage />
        <TimelinePage />
      </main>
    </>
  );
}
